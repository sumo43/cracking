#include <cstdlib>
#include <iostream>
#include <vector>

using namespace std;

//where robot wants to be
const int h = 5;
const int w = 5;

int recursiveBFS(int loc1, int loc2, int **board, char * &path, int pathLength) {


    if(loc1 == 4 && loc2 == 4) {
        path = new char[pathLength + 1];
        return pathLength; 
    }
    else if(loc1 >= 5 || loc2 >= 5) {
        return -1;
    }
    else if(board[loc1][loc2] == 1) {
        return -1;
    }
    else {

        int right = recursiveBFS(loc1, loc2 + 1, board, path, pathLength + 1); 
        int bottom = recursiveBFS(loc1 + 1, loc2, board, path, pathLength + 1);

        cout << "right" << right << endl;
        cout << "bottom" bottom << endl;



        if(right == -1 && bottom == -1) {
            return -1;
        }
        else if(right == -1 && bottom != -1) {
            path[bottom - pathLength] = 'b';
            return bottom;
        }
        else if(right != -1 && bottom == -1) {
            path[right - pathLength] = 'r';
            return right;
        }
        else if(right > bottom) {
            path[bottom - pathLength] = 'b';
            return bottom;
        }
        else if(right < bottom) {
            path[right - pathLength] = 'r';
            return bottom;
        }

    }

}

int main(void) {
    


    int y = 0;
    int x = 0;

    //init map
    int **map = new int *[h];
    for(int i = 0; i < h; i++) {
        map[i] = new int[w];
        for(int j = 0; j < w; j++) {
            map[i][j] = 0;
        }
    }

    char *path;

    int pathLen = recursiveBFS(0,0,map,path,0);
    cout << pathLen << endl;
    for(int i = 0; i < pathLen; i++) {
        cout << path[i] << endl;
    }


}

